plugins {
    id 'java'
    id 'jacoco'
}

group 'com.cslgduke.dmeo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'cn.hutool:hutool-all:5.3.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    compileOnly  'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.4.0'
    testImplementation 'org.mockito:mockito-inline:4.4.0'
}
//test.onlyIf { project.hasProperty('slowtest') }
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
//    jacoco {
//        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
//        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
//    }    jacoco {
//        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
//        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
//    }
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}
//configuring defaults for JaCoCo usage in your build.
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
//    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation =  layout.buildDirectory.dir('jacocoHtml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


allprojects {
    dependencies {

    }
}
subprojects{

}
//task hello {
//    println 'Hello world!'
//}


